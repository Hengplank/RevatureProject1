package com.revature.dao.daoimpl;

import java.io.InputStream;
import java.io.OutputStream;
import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;


import com.revature.beans.Reimbursement;
import com.revature.beans.Reimbursement.RequestStatus;
import com.revature.beans.Reimbursement.RequestType;

import com.revature.dao.ReimbursementDao;
import com.revature.utilities.ConnectionUtil;

public class ReimbursementDaoImpl implements ReimbursementDao{

	public boolean denyRequest(int req_id, int resolver_id)
	{
		PreparedStatement pstmt = null;
		try(Connection conn = ConnectionUtil.getConnection()){
			conn.setAutoCommit(false);
			String sql = "UPDATE ERS_REIMBURSEMENT "
					+ "SET r_resolved = CURRENT_TIMESTAMP, u_id_resolver = ?, rs_status = 2 WHERE r_id = ?";
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1, resolver_id);
			pstmt.setInt(2, req_id);
			int rowCount = pstmt.executeUpdate();
			conn.commit();
			conn.setAutoCommit(true);
			if(rowCount > 0) return true;
		} catch(Exception e) {
			e.printStackTrace();
		}
		return false;
		
	}
	public boolean approveRequest(int req_id, int resolver_id)
	{
		PreparedStatement pstmt = null;
		try(Connection conn = ConnectionUtil.getConnection()){
			conn.setAutoCommit(false);
			String sql = "UPDATE ERS_REIMBURSEMENT "
					+ "SET r_resolved = CURRENT_TIMESTAMP, u_id_resolver = ?, rs_status = 3 WHERE r_id = ?";
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1, resolver_id);
			pstmt.setInt(2, req_id);
			int rowCount = pstmt.executeUpdate();
			conn.commit();
			conn.setAutoCommit(true);
			if(rowCount > 0) return true;
		} catch(Exception e) {
			e.printStackTrace();
		}
		return false;
		
	}
	public List<Reimbursement> getPendingRequests(int employee_id)
	{
		PreparedStatement pstmt = null;
		try(Connection conn = ConnectionUtil.getConnection()){
			String sql = "SELECT r_id,r_amount,r_description,r_receipt,r_submitted,u_id," + 
					"u_username,rt_type,rs_status FROM ERS_REIMBURSEMENT " + 
					"INNER JOIN ERS_USER ON u_id_author = u_id " +
					"WHERE u_id = ? AND rs_status = 1 ";
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1, employee_id);
			ResultSet rs = pstmt.executeQuery();
			List<Reimbursement> requests = new ArrayList<Reimbursement>();
			
			while(rs.next()) {
				int r_id = rs.getInt("r_id");
				double r_amount = rs.getDouble("r_amount");
				String r_description = rs.getString("r_description");
				boolean r_receipt = rs.getBlob("r_receipt") != null;
				Date r_submitted = rs.getDate("r_submitted");
				Date r_resolved = null;
				int u_id_author = rs.getInt("u_id");
				String author_name = rs.getString("u_username");
				int u_id_resolver = -1;
				String resolver_name = null;
				RequestType rt_type = RequestType.valueOf(rs.getInt("rt_type"));
				RequestStatus rs_status = RequestStatus.valueOf(rs.getInt("rs_status"));
				requests.add(new Reimbursement(r_id,r_amount,r_description,r_receipt,r_submitted,
						r_resolved,u_id_author,author_name,u_id_resolver,resolver_name,rt_type,rs_status));
			}
			
			return requests;
		} catch(Exception e) {
			e.printStackTrace();
		}
		return null;
		
	}
	public List<Reimbursement> getResolvedRequests(int employee_id)
	{
		PreparedStatement pstmt = null;
		try(Connection conn = ConnectionUtil.getConnection()){
			String sql = "SELECT r_id,r_amount,r_description,r_receipt,r_submitted,r_resolved,U1.u_id," + 
					"U1.u_username,U2.u_id AS manager_id,U2.u_username AS manager_name,rt_type,rs_status " + 
					"FROM ERS_REIMBURSEMENT " + 
					"INNER JOIN ERS_USER U1 ON u_id_author = U1.u_id " + 
					"INNER JOIN ERS_USER U2 ON u_id_resolver = U2.u_id " + 
					"WHERE U1.u_id = ? AND (rs_status = 2 OR rs_status = 3)";
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1, employee_id);
			ResultSet rs = pstmt.executeQuery();
			List<Reimbursement> requests = new ArrayList<Reimbursement>();
			while(rs.next()) {
				int r_id = rs.getInt("r_id");
				double r_amount = rs.getDouble("r_amount");
				String r_description = rs.getString("r_description");
				boolean r_receipt = rs.getBlob("r_receipt") != null;
				Date r_submitted = rs.getDate("r_submitted");
				Date r_resolved = rs.getDate("r_resolved");
				int u_id_author = rs.getInt("u_id");
				String author_name = rs.getString("u_username");
				int u_id_resolver = rs.getInt("manager_id");
				String resolver_name = rs.getString("manager_name");
				//RequestType rt_type = RequestType.valueOf(rs.getInt("rt_type"));
				//RequestStatus rs_status = RequestStatus.valueOf(rs.getInt("rs_status"));
				//requests.add(new Request(r_id,r_amount,r_description,r_receipt,r_submitted,
				//		r_resolved,u_id_author,author_name,u_id_resolver,resolver_name,rt_type,rs_status));
			}
			return requests;
		} catch(Exception e) {
		}
		return null;
		
	}
	public List<Reimbursement> getPendingRequests()
	{
		PreparedStatement pstmt = null;
		try(Connection conn = ConnectionUtil.getConnection()){
			String sql = "SELECT r_id,r_amount,r_description,r_receipt,r_submitted,u_id," + 
					"u_username,rt_type,rs_status FROM ERS_REIMBURSEMENT " + 
					"INNER JOIN ERS_USER ON u_id_author = u_id " + 
					"WHERE rs_status = 1";
			pstmt = conn.prepareStatement(sql);
			ResultSet rs = pstmt.executeQuery();
			List<Reimbursement> requests = new ArrayList<Reimbursement>();
			while(rs.next()) {
				int r_id = rs.getInt("r_id");
				double r_amount = rs.getDouble("r_amount");
				String r_description = rs.getString("r_description");
				boolean r_receipt = rs.getBlob("r_receipt") != null;
				Date r_submitted = rs.getDate("r_submitted");
				Date r_resolved = null;
				int u_id_author = rs.getInt("u_id");
				String author_name = rs.getString("u_username");
				int u_id_resolver = -1;
				String resolver_name = null;
				//RequestType rt_type = RequestType.valueOf(rs.getInt("rt_type"));
				//RequestStatus rs_status = RequestStatus.valueOf(rs.getInt("rs_status"));
				//requests.add(new Request(r_id,r_amount,r_description,r_receipt,r_submitted,
				//		r_resolved,u_id_author,author_name,u_id_resolver,resolver_name,rt_type,rs_status));
			}
			return requests;
		} catch(Exception e) {
		}
		return null;
		
	}
	public List<Reimbursement> getResolvedRequests()
	{
		PreparedStatement pstmt = null;
		try(Connection conn = ConnectionUtil.getConnection()){
			String sql = "SELECT r_id,r_amount,r_description,r_receipt,r_submitted,r_resolved,U1.u_id," + 
					"U1.u_username,U2.u_id AS manager_id,U2.u_username AS manager_name,rt_type,rs_status " + 
					"FROM ERS_REIMBURSEMENT " + 
					"INNER JOIN ERS_USER U1 ON u_id_author = U1.u_id " + 
					"INNER JOIN ERS_USER U2 ON u_id_resolver = U2.u_id " + 
					"WHERE rs_status = 2 OR rs_status = 3";
			pstmt = conn.prepareStatement(sql);
			ResultSet rs = pstmt.executeQuery();
			List<Reimbursement> requests = new ArrayList<Reimbursement>();
			while(rs.next()) {
				int r_id = rs.getInt("r_id");
				double r_amount = rs.getDouble("r_amount");
				String r_description = rs.getString("r_description");
				boolean r_receipt = rs.getBlob("r_receipt") != null;
				Date r_submitted = rs.getDate("r_submitted");
				Date r_resolved = rs.getDate("r_resolved");
				int u_id_author = rs.getInt("u_id");
				String author_name = rs.getString("u_username");
				int u_id_resolver = rs.getInt("manager_id");
				String resolver_name = rs.getString("manager_name");
				//TODO
				//RequestType rt_type = RequestType.valueOf(rs.getInt("rt_type"));
				//RequestStatus rs_status = RequestStatus.valueOf(rs.getInt("rs_status"));
				//requests.add(new Request(r_id,r_amount,r_description,r_receipt,r_submitted,
				//		r_resolved,u_id_author,author_name,u_id_resolver,resolver_name,rt_type,rs_status));
			}
			return requests;
		} catch(Exception e) {
			e.printStackTrace();
		}
		return null;
		
	}

	//public boolean createRequest(double amount,String description, 
	//		InputStream receipt_image, int user_id, RequestPayload type);
	//public boolean createRequest(double amount,String description, 
	//		InputStream receipt_image, int user_id, RequestType type);
	public void getReceipt(int receipt_id, OutputStream out)
	{
		PreparedStatement pstmt = null;
		try(Connection conn = ConnectionUtil.getConnection()){
			String sql = "SELECT r_receipt FROM ERS_REIMBURSEMENT WHERE r_id = ?";
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1, receipt_id);
			ResultSet rs = pstmt.executeQuery();
			if(rs.next()) {
				InputStream receipt = rs.getBinaryStream("r_receipt");
				if(receipt != null) {
					byte[] buf = new byte[1024];
					while (receipt.read(buf) > 0) {
						out.write(buf);
					}
				}
			}
		} catch(Exception e) {
			e.printStackTrace();
		}
	}
	public void getReceipt(int user_id, int receipt_id, OutputStream out)
	{
		
	}
}
