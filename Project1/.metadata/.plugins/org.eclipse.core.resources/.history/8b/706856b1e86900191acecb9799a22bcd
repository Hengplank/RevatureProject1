package com.revature.dao.daoimpl;

import java.io.OutputStream;
import java.util.List;

import org.omg.CORBA.Request;

import com.revature.beans.User;
import com.revature.beans.UserRole;
import com.revature.dao.UserDao;

import java.io.InputStream;
import java.io.OutputStream;
import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import com.revature.utilities.ConnectionUtil;


public class UserDaoImpl  implements UserDao{

	public User verifyUser(String username, String password)
	{
		PreparedStatement pstmt = null;
		try(Connection conn = ConnectionUtil.getConnection())
		{
			String sql = "SELECT * FROM ERS_USER WHERE u_username = ? AND u_password = ?";
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, username);
			pstmt.setString(2, password);
			ResultSet rs = pstmt.executeQuery();
			if(rs.next()) {
				int id = rs.getInt("u_id");
				String firstname = rs.getString("u_firstname");
				String lastname = rs.getString("u_lastname");
				String email = rs.getString("u_email");
				UserRole role = UserRole.valueOf(rs.getInt("ur_id"));
				//return new User(id,username,firstn/ame,lastname,email,role);
				return new User(id,username,password, firstname,lastname,email,role);
				
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		finally {
			
		}
		
		return null;
		
	}
	public User getUser(String username)
	{
		PreparedStatement pstmt = null;
		try(Connection conn = ConnectionUtil.getConnection()){
			String sql = "SELECT * FROM ERS_USER WHERE u_username = ?";
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, username);
			ResultSet rs = pstmt.executeQuery();
			if(rs.next()) {
				int id = rs.getInt("u_id");
				String firstname = rs.getString("u_firstname");
				String lastname = rs.getString("u_lastname");
				String email = rs.getString("u_email");
				UserRole role = UserRole.valueOf(rs.getInt("ur_id"));
				return new User(id,username,firstname,lastname,email,role);
			}
		} catch(Exception e) {
			e.printStackTrace();
		}
		return null;
		
	}
	public boolean updateUser(User user)
	{
		PreparedStatement pstmt = null;
		try(Connection conn = ConnectionUtil.getConnection()){
			conn.setAutoCommit(false);
			String sql="UPDATE ERS_USER SET U_USERNAME=?, U_FIRSTNAME=?,U_LASTNAME=?,U_EMAIL=? WHERE U_ID=?";
			pstmt=conn.prepareStatement(sql);
			pstmt.setString(1, user.getUsername());
			pstmt.setString(2, user.getFirstName());
			pstmt.setString(3,user.getLastName());
			pstmt.setString(4, user.getEmail());
			pstmt.setInt(5, user.getId());
            int rowsAff=pstmt.executeUpdate();
            conn.commit();
            conn.setAutoCommit(true);
            if(rowsAff>0)
            	return true;
            else
            	return false;
		}
		catch(Exception e){
			e.printStackTrace();
		}
		return false;
	}
	public boolean denyRequest(int req_id, int reolver_id)
	{
		return false;
		
	}
	public boolean approveRequest(int req_id, int resolver_id)
	{
		return false;
		
	}
	public List<Request> getPendingRequests(int employee_id)
	{
		return null;
		
	}
	public List<Request> getResolvedRequests(int employee_id)
	{
		return null;
		
	}
	public List<Request> getPendingRequests()
	{
		return null;
		
	}
	public List<Request> getResolvedRequests()
	{
		return null;
		
	}
	public List<User> getEmployees()
	{
		return null;
		
	}
	public boolean createUser(String username, String password, String firstname, 
			String lastname, String email, UserRole role)
	{
		return false;
		
	}
	//public boolean createRequest(double amount,String description, 
	//		InputStream receipt_image, int user_id, RequestPayload type);
	//public boolean createRequest(double amount,String description, 
	//		InputStream receipt_image, int user_id, RequestType type);
	public void getReceipt(int receipt_id, OutputStream out)
	{
		
	}
	public void getReceipt(int user_id, int receipt_id, OutputStream out)
	{
		
	}
}
