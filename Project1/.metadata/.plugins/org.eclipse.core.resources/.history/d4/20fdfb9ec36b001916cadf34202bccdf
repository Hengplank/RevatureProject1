package com.revature.dao.daoimpl;

import java.io.OutputStream;
import java.util.List;

import javax.servlet.http.HttpServletResponse;

import org.omg.CORBA.Request;

import com.revature.beans.User;
import com.revature.dao.UserDao;
import com.revature.beans.User.UserRole;

import java.io.InputStream;
import java.io.OutputStream;
import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import com.revature.utilities.ConnectionUtil;

public class UserDaoImpl implements UserDao {

	public User verifyUser(String username, String password) {
		PreparedStatement pstmt = null;
		try (Connection conn = ConnectionUtil.getConnection()) {
			String sql = "SELECT * FROM ERS_USER WHERE u_username = ? AND u_password = ?";
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, username);
			pstmt.setString(2, password);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next()) {
				int id = rs.getInt("u_id");
				String firstname = rs.getString("u_firstname");
				String lastname = rs.getString("u_lastname");
				String email = rs.getString("u_email");
				UserRole role = UserRole.valueOf(rs.getInt("ur_role"));
				// return new User(id,username,firstname,lastname,email,role);
				return new User(id, username, password, firstname, lastname, email, role);

			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {

		}

		return null;

	}

	// public User getUser(String username, String password, HttpServletResponse
	// response)
	public User getUser(String username, String password)// , HttpServletResponse response)
	{
		PreparedStatement pstmt = null;
		try (Connection conn = ConnectionUtil.getConnection()) {
			// String sql = "SELECT * FROM ERS_USER WHERE u_username='" + username + "' AND
			// u_password='" + password + "';";//u_username = ?";
			String sql = "SELECT * FROM ERS_USER WHERE u_username=? AND u_password=?;";
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, username);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next())
//			{
//				int id = rs.getInt("u_id");
//				String firstname = rs.getString("u_firstname");
//				String lastname = rs.getString("u_lastname");
//				String email = rs.getString("u_email");
//				UserRole role = UserRole.valueOf(rs.getInt("ur_role"));
//				return new User(id,username,firstname,lastname,email,role);
//				
//			}

//				BEAN LAYOUT
//			this.id = id;
//			this.username = username;
//			this.password = password;
//			this.firstName = firstName;
//			this.lastName = lastName;
//			this.email = email;
//			this.role = role;

			{
				User temp = new User(rs.getInt("u_id"),
						rs.getString("u_username"), 
						rs.getString("u_password"),
						rs.getString("u_firstname"),
						rs.getString("u_lastname"),
						rs.getString("u_email"),
						rs.getInt("ur_role"));
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;

	}

	public boolean updateUser(User user) {
		PreparedStatement pstmt = null;
		try (Connection conn = ConnectionUtil.getConnection()) {
			conn.setAutoCommit(false);
			String sql = "UPDATE ERS_USER SET U_USERNAME=?, U_FIRSTNAME=?,U_LASTNAME=?,U_EMAIL=? WHERE U_ID=?";
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, user.getUsername());
			pstmt.setString(2, user.getFirstName());
			pstmt.setString(3, user.getLastName());
			pstmt.setString(4, user.getEmail());
			pstmt.setInt(5, user.getId());
			int rowsAff = pstmt.executeUpdate();
			conn.commit();
			conn.setAutoCommit(true);
			if (rowsAff > 0)
				return true;
			else
				return false;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return false;
	}

	public List<User> getEmployees() {
		PreparedStatement pstmt = null;
		ArrayList<User> arr = new ArrayList<User>();
		try (Connection conn = ConnectionUtil.getConnection()) {
			String sql = "SELECT * FROM ERS_USER WHERE U_ID=1";
			pstmt = conn.prepareStatement(sql);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next()) {
				int id = rs.getInt("U_ID");
				String username = rs.getString("U_USERNAME");
				String firstname = rs.getString("U_FIRSTNAME");
				String lastname = rs.getString("U_LASTNAME");
				String email = rs.getString("U_EMAIL");

				User u = new User(id, username, firstname, lastname, email, UserRole.EMPLOYEE);
				arr.add(u);
			}
			return arr;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;

	}

	public boolean createUser(String username, String password, String firstname, String lastname, String email,
			UserRole role) {
		PreparedStatement pstmt = null;
		try (Connection conn = ConnectionUtil.getConnection()) {
			conn.setAutoCommit(false);
			String sql = "INSERT INTO ERS_USER (u_username,u_password,u_firstname,u_lastname,u_email,ur_role) VALUES (?,?,?,?,?,?)";
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, username);
			pstmt.setString(2, password);
			pstmt.setString(3, firstname);
			pstmt.setString(4, lastname);
			pstmt.setString(5, email);
			pstmt.setInt(6, role.getId());
			int rowCount = pstmt.executeUpdate();
			conn.commit();
			conn.setAutoCommit(true);
			if (rowCount > 0)
				return true;
		} catch (Exception e) {
		}
		return false;

	}

}
